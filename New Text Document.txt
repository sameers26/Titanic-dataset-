import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the Titanic dataset
data = pd.read_csv('train.csv')

# Data preprocessing
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)

# Select features and encode categorical variables
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = data[features]
X = pd.get_dummies(X, columns=['Sex', 'Embarked'], drop_first=True)
y = data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build and train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:\n', report)

# Predict the survival of new passengers
new_passenger_data = pd.DataFrame({
    'Pclass': [3],
    'Sex': ['male'],
    'Age': [25],
    'SibSp': [0],
    'Parch': [0],
    'Fare': [7.25],
    'Embarked': ['S']
})

# Encode categorical variables for the new passenger data
new_passenger_data = pd.get_dummies(new_passenger_data, columns=['Sex', 'Embarked'], drop_first=True)

# Make predictions
survival_prediction = model.predict(new_passenger_data)

if survival_prediction[0] == 1:
    print('The passenger is predicted to have survived.')
else:
    print('The passenger is predicted not to have survived.')
